import google.generativeai as genai
import json

# Step 1: Configure Gemini
genai.configure(api_key="")
# Step 2: Initialize Model
model = genai.GenerativeModel('gemini-1.5-pro')  

# Step 3: Define the Event Finder Agent
def event_finder_agent(hotel_area, tom_date):
    """Finds major events happening near a hotel in the next 7 days."""
    
    prompt = f"""
You are an event aggregator AI.
Your task is to find important events happening within and near {hotel} for the next 7 days starting from tomorrow:{tom_date}.



### Requirements:
- Strictly output in JSON format.
- Each event must include:
  - "event_name"
  - "date"
  - "location"
  - "short_description"


Be realistic, make assumptions based on the location if real data isn't accessible.

Format Example:

[
  {{
    "event_name": "Stony Brook Music Festival",
    "date": "2025-04-27",
    "location": "Stony Brook University",
    "short_description": "Annual outdoor music festival featuring local bands."
  }},
  ...
]
"""
    response = model.generate_content(
        prompt,
        generation_config={
            "temperature": 0.4,
            "response_mime_type": "application/json"
        }
    )
    
    return response.text

# Step 4: Define the Reviewer Agent
def reviewer_agent(events_json):
    """Reviews the event list JSON generated by Event Finder."""
    
    reviewer_prompt = f"""
You are an expert reviewer for event lists. Your task is to review the following JSON list of events happening near a hotel for the next 7 days starting from tomorrow:{tom_date}. 

### Instructions:
1. Validate the JSON format and ensure it has proper keys:
   - "event_name", "date", "location", and "short_description"
2. Assess the logic of the events:
   - Do they make sense? Are there any events that shouldn't be there or should be added?
3. Also validate the order of dates of events in ascending order.
Here is the event list that needs reviewing:

{events_json}
"""
    response = model.generate_content(
        reviewer_prompt,
        generation_config={
            "temperature": 0.2,
            "response_mime_type": "application/json"
        }
    )
    
    return response.text

# Step 5: Usage Example
hotel = "Hilton Garden Inn, Stony Brook, New York"
tom_date = "2025-05-01"

# 1. Get Events from Event Finder
events_output = event_finder_agent(hotel, tom_date)

# 2. Review the Events
reviewed_output = reviewer_agent(events_output)

# 3. Print Results
print("=== Event Finder Output ===")
print(events_output)

print("\n=== Reviewer Output ===")
print(reviewed_output)
